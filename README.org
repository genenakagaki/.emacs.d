#+title: Readme

* TODO Things to do 

** Set up org-roam

** Set up blog

** Set up plantUML

** Set up image preview thing
Preview images on the browser
Use browser sync
Make a html page that just shows the image,
When you want to render the image, just change the image url

** Set up yaml

** Set up Javascript

** Set up HTML

** Set up JSON

* Configuration
** Coding
Follow the emacs-lisp coding convention
https://github.com/bbatsov/emacs-lisp-style-guide
** Dependencies

*** Deps for flycheck
- Dockerfile :: [[https://github.com/hadolint/hadolint][hadolint]]

** Adding a new language
1. Add dependencies by checking the flycheck
   https://www.flycheck.org/en/latest/languages.html#syntax-checker-emacs-lisp

* Usage

  
* Emacs Concepts
** Variables
*** Directory local variables
You can set local variables by using the =.dir-locals.el= file.
The value must be an alist

When you set the directory local variables, you should use the command: =add-dir-local-variable=. This way you don't make a mistake when adding variables

*** Local Variables
The variable is different per buffer. If you chnage the variable in a certain buffer, the other buffer's variables will not change.
You can set this to the same thing by defining the default variable by the =setq-default= function.

*** File local variables
You can add file local variables with the =add-file-local-variable=.
** alist (Association List)
Example:
#+begin_example emacs-lisp
((pine . cones)
 (oak . acorns)
 (maple . seeds))
#+end_example
** Which command did I invoke?
You can check which command you invoked using the =view-lossage= command. 

** Interactive functions
* Evil concepts
** Which evil state am I in?
You can check the evil state with the =evil-state= variable. I think it gets updated each time a state changes.

* Org concepts 
** Source Code
*** Extract source code into another file 
You can do this with the =tangle= header arguments
** Markup
** How to use org mode
*** Editing the TODO state
Use the =shift= key to change the TODO state and priority
** Org syntax API
https://orgmode.org/worg/dev/org-element-api.html

* general.el keybindings

** How to check what string maps to which key? 
Since general.el uses the =kbd= function, you can check the docs for that functions.
If you want to create a certain mapping for a particular key, you can use the =describe-key= function, which is usually mapped to =C-h k=.

